#ifndef _UV_FS_CEU
#define _UV_FS_CEU

#include "c.ceu"
#include "uv/uv.ceu"

native/const
    _O_CREAT,
    _O_RDONLY,
    _O_WRONLY,
    _S_IRUSR,
    _S_IWUSR,
    _S_IRGRP,
    _S_IWGRP,
    _S_IROTH,
;

native/plain
    _uv_fs_t,
    _uv_stat_t,
;

native
    _ceu_uv_fs_read,
    _ceu_uv_fs_open,
    _ceu_uv_fs_write,
    _ceu_uv_fs_fstat,
;

native/nohold
    _ceu_uv_fs_close,
    _ceu_uv_fs_close_,
    _uv_fs_req_cleanup,
;

input _uv_fs_t&& UV_FS;

data UV_FS_File with
    event void ok;
    var   int  fd;
end

code/await UV_FS_Open (var _char&& path, var int flags, var int mode)
                        -> (var& UV_FS_File file)
                            -> int
do
    var UV_FS_File file_ = val UV_FS_File(_, -1);
    file = &file_;

    var _uv_fs_t req_open  = _;
    var _uv_fs_t req_close = _;

    var int ret;
    do
        ret = _ceu_uv_fs_open(&&req_open, _PURIFY(&&path[0]), flags, mode);
    finalize (req_open) with
        _ceu_uv_fs_close_(&&req_close, req_open.result);
        _uv_fs_req_cleanup(&&req_open);
    end
#if 1
    _ceu_dbg_assert(ret == 0);  // libuv seems to always return 0
#else
    if ret < 0 then
        escape ret;
    end
#endif

    var _uv_fs_t&& req = await UV_FS until req==&&req_open;
    file_.fd = req_open.result;
    if file_.fd < 0 then
        escape file_.fd;
    end
    emit file_.ok;

    await FOREVER;
end

code/await UV_FS_Read (var& UV_FS_File file, vector&[] byte buf,
                       var usize size, var usize offset)
                        -> ssize
do
    var _uv_buf_t buf_ = _uv_buf_init(&&buf[0], size);
    var _uv_fs_t req_read = _;

    var ssize ret;
    do
        ret = _ceu_uv_fs_read(&&req_read, file.fd, &&buf_, 1, offset);
    finalize (req_read, buf_) with
        _uv_fs_req_cleanup(&&req_read);
    end
    if ret < 0 then
        escape ret;
    end

    var _uv_fs_t&& req = await UV_FS until req==&&req_read;
    _ceu_vector_setlen(&&buf, req_read.result, 1);
    escape req_read.result;
end

code/await UV_FS_ReadLine (var& UV_FS_File file, vector&[] byte buf,
                           var usize offset)
                            -> ssize
do
    _ceu_dbg_assert($buf == 0);

    // TODO: reading 1-by-1
    var usize tot = 0;
    loop do
        vector[1] byte c;
        var ssize n = await UV_FS_Read(&file, &c, 1, offset);
        tot = tot + 1;
        offset = offset + 1;
        if n <= 0 then
            escape n;
        end
        _ceu_dbg_assert(n == 1);
        if c[0] == {'\n'} then
            break;
        end
        buf = buf..c;
    end

    escape tot as ssize;
end

code/await UV_FS_Write (var& UV_FS_File file, vector&[] byte buf,
                        var usize size, var usize offset)
                        -> ssize
do
    var _uv_buf_t buf_ = _uv_buf_init(&&buf[0], size);

    var _uv_fs_t req_write = _;
    do finalize with
        _uv_fs_req_cleanup(&&req_write);
    end;

    var ssize ret;
    do
        ret = _ceu_uv_fs_write(&&req_write, file.fd, &&buf_, 1, offset);
    finalize (req_write, buf_) with
        _uv_fs_req_cleanup(&&req_write);
    end

    if ret < 0 then
        escape ret;
    end

    var _uv_fs_t&& req = await UV_FS until req==&&req_write;
    escape req_write.result;
end

code/await UV_FS_Fstat (var& UV_FS_File file, var& _uv_stat_t stat) -> int
do
    var _uv_fs_t req_fstat = _;
    do finalize with
        _uv_fs_req_cleanup(&&req_fstat);
    end

    var int ret;
    do
        ret = _ceu_uv_fs_fstat(&&req_fstat, file.fd);
    finalize (req_fstat) with
        _uv_fs_req_cleanup(&&req_fstat);
    end

    if ret < 0 then
        escape ret;
    end
    var _uv_fs_t&& req = await UV_FS until req==&&req_fstat;

    stat = *(req_fstat.ptr as _uv_stat_t&&);

    escape 0;
end

native/pos do
    ##define ceu_uv_fs_open(a,b,c,d)    uv_fs_open(&ceu_uv_loop,a,b,c,d,ceu_uv_fs_cb)
    ##define ceu_uv_fs_close(a,b)       uv_fs_close(&ceu_uv_loop,a,b,ceu_uv_fs_close_cb)
    ##define ceu_uv_fs_close_(a,b)      uv_fs_close(&ceu_uv_loop,a,b,NULL); \\
                                        ceu_uv_fs_close_cb(a)
    ##define ceu_uv_fs_read(a,b,c,d,e)  uv_fs_read(&ceu_uv_loop,a,b,c,d,e,ceu_uv_fs_cb)
    ##define ceu_uv_fs_write(a,b,c,d,e) uv_fs_write(&ceu_uv_loop,a,b,c,d,e,ceu_uv_fs_cb)
    ##define ceu_uv_fs_fstat(a,b)       uv_fs_fstat(&ceu_uv_loop,a,b,ceu_uv_fs_cb)

    void ceu_uv_fs_cb (uv_fs_t* req) {
        ceu_input(CEU_INPUT_UV_FS, &req);
    }

    void ceu_uv_fs_close_cb (uv_fs_t* req) {
        //TODO???
        //assert(req->result == 0);
        uv_fs_req_cleanup(req);
    }
end

#endif
