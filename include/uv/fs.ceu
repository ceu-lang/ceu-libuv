#ifndef _UV_FS_CEU
#define _UV_FS_CEU

#include "c.ceu"
#include "uv/uv.ceu"

native/const
    _O_APPEND,
    _O_CREAT,
    /* _O_RDONLY, */
    _O_TRUNC,
    _O_WRONLY,
    _S_IRUSR,
    _S_IWUSR,
    _S_IRGRP,
    _S_IWGRP,
    _S_IROTH,
    _UV_ENOBUFS,
;

native/plain
    _uv_fs_t,
    _uv_stat_t,
;

native
    _ceu_uv_fs_read,
    _ceu_uv_fs_open,
    _ceu_uv_fs_write,
    _ceu_uv_fs_fstat,
;

native/nohold
    _ceu_uv_fs_close,
    _ceu_uv_fs_close_,
    _uv_fs_req_cleanup,
;

input _uv_fs_t&& UV_FS;

data UV_FS_File with
    var&[] byte  buffer;
    var    usize offset =  0;
    var    int   handle = -1;
    event  none  ok;
end

code/await UV_FS_Open_Try (var _char&& path, var usize? buffer_size, var int? flags, var int? mode)
                        -> (var UV_FS_File file)
                            -> int
do
    if not buffer_size? then
        buffer_size = 1024;
    end
    if not flags? then
        flags = _O_RDONLY;
    end
    if not mode? then
        mode = 0;
    end

    var[buffer_size!*] byte buffer;
    file = val UV_FS_File(&buffer,_,_,_);

    var _uv_fs_t req_open  = _;
    var _uv_fs_t req_close = _;

    var int ret;
    do
        ret = _ceu_uv_fs_open(&&req_open, _PURIFY(&&path[0]), flags!, mode!);
    finalize (req_open) with
        if req_open.result >= 0 then
            _ceu_uv_fs_close_(&&req_close, req_open.result);
        end
        _uv_fs_req_cleanup(&&req_open);
    end
#if 1
    _ceu_assert(ret == 0, "bug found");  // libuv seems to always return 0
#else
    if ret < 0 then
        escape ret;
    end
#endif

    var _uv_fs_t&& req = await UV_FS until req==&&req_open;
    file.handle = req_open.result;
    if file.handle < 0 then
        escape file.handle;
    end
    emit file.ok;

    await FOREVER;
end

code/await UV_FS_Open (var _char&& path, var usize? buffer_size, var int? flags, var int? mode)
                        -> (var& UV_FS_File file)
                            -> NEVER
    throws Exception.Uv
do
    var&? UV_FS_Open_Try o = spawn UV_FS_Open_Try(path,buffer_size,flags,mode);
    var int? err =
        watching o do
            file = &o.file;
            await FOREVER;
        end;
    var Exception.Uv e = val Exception.Uv(_uv_strerror(err!) as _char&&,err!);
    throw e;
end

code/await UV_FS_Read_N (var& UV_FS_File file, var usize n) -> usize
    throws Exception.Uv
do
    if n == 0 then
        escape 0;
    end

    if $$file.buffer < n then
        var Exception.Uv e = val Exception.Uv({uv_strerror(UV_ENOBUFS)} as _char&&, {UV_ENOBUFS});
        throw e;
    end

    if $file.buffer >= n then
        escape 0;
    end
    n = n - $file.buffer;

    var _uv_buf_t buf = _;
    var _uv_fs_t  req = _;

    var usize n_togo = _;
    var int   times  = _;
    var int free = ($$file.buffer - _ceu_vector_ptr(&&file.buffer):ini) as int;
    if free >= n then
        times  = 1;    // requires a single read
        n_togo = n;
    else
        times  = 2;    // requires a second read
        n_togo = free;
    end
    buf = _uv_buf_init(&&file.buffer[$file.buffer], n_togo);

    var usize n_read = 0;

    var int i;
    loop i in [1->times] do
        var ssize ret;
        do
            ret = _ceu_uv_fs_read(&&req, file.handle, &&buf, 1, file.offset);
        finalize (req, buf) with
            _uv_fs_req_cleanup(&&req);
        end
        if ret < 0 then
            var Exception.Uv e = val Exception.Uv(_uv_strerror(ret) as _char&&, ret as int);
            throw e;
        end

        var _uv_fs_t&& req_ = await UV_FS until req_==&&req;
        if req.result < 0 then
            var Exception.Uv e = val Exception.Uv(_uv_strerror(req.result) as _char&&, req.result);
            throw e;
        else/if req.result == 0 then
            if n == 1 then
                escape 0;
            else
                escape n_read;
            end
        end

        _ceu_assert(n >= req.result, "bug found");
        //_ceu_assert(n_togo == req.result, "bug found");
        file.offset = file.offset + req.result;
        n_read  = n_read  + req.result;
        _ceu_vector_setlen(&&file.buffer, $file.buffer+req.result, 1);

        // second read
        if times == 2 then
            n_togo = (n - free);
            buf = _uv_buf_init(&&file.buffer[free], n_togo);
        end
    end

    escape n_read;
end

code/await UV_FS_Read_Line (var& UV_FS_File file, var&[] byte line, var usize? by)
                                -> usize
    throws Exception.Uv
do
    if not by? then
        by = 128;
    end

    var usize n_read = 0;

    var usize i;
    loop i in [1 -> $file.buffer] do       // "[0 -> $file.buf[" may underflow
        var byte c = file.buffer[0];
        $file.buffer = $file.buffer - 1;
        n_read = n_read + 1;
        if c == {'\n'} then
            escape n_read;
        else
            line = line .. [c];
        end
    end

    loop do
        var usize n = do
            var usize free = $$file.buffer - $file.buffer;
            if by! <= free then
                escape by!;
            else
                escape free;
            end
        end;

        if n == 0 then
            var Exception.Uv e = val Exception.Uv(_uv_strerror({UV_ENOBUFS}) as _char&&, {UV_ENOBUFS});
            throw e;
        end

        var usize n_ = await UV_FS_Read_N(&file, n);   // may read less than "n" bytes
        if n_ == 0 then
            escape 0;
        end
        n = n_ as usize;

        _ceu_assert($file.buffer == n, "bug found");
        var usize i;
        loop i in [0 -> $file.buffer[ do
            var byte c = file.buffer[0];
            $file.buffer = $file.buffer - 1;
            n_read = n_read + 1;
            if c == {'\n'} then
                escape n_read;
            else
                line = line .. [c];
            end
        end
    end
end

code/await UV_FS_Write_N (var& UV_FS_File file, var usize? n) -> usize
    throws Exception.Uv
do
    if not n? then
        n = $file.buffer;
    end

    var _uv_buf_t buf = _;
    var _uv_fs_t  req = _;

    var int   times = _;
    var usize n_togo = _;
    var int filled = ($$file.buffer - _ceu_vector_ptr(&&file.buffer):ini) as int;
    if filled >= n! then
        times  = 1;   // requires a single write
        n_togo = n!;
    else
        times  = 2;   // requires a second write
        n_togo = filled;
    end
    buf = _uv_buf_init(&&file.buffer[0], n_togo);

    var usize n_written = 0;

    var int i;
    loop i in [1->times] do
        var ssize ret;
        do
            ret = _ceu_uv_fs_write(&&req, file.handle, &&buf, 1, file.offset);
        finalize (req, buf) with
            _uv_fs_req_cleanup(&&req);
        end
        if ret < 0 then
            var Exception.Uv e = val Exception.Uv(_uv_strerror(ret) as _char&&, ret as int);
            throw e;
        end

        var _uv_fs_t&& req_ = await UV_FS until req_==&&req;
        if req.result < 0 then
            var Exception.Uv e = val Exception.Uv(_uv_strerror(req.result) as _char&&, req.result);
            throw e;
        end

        _ceu_assert(n! >= req.result, "bug found");
        _ceu_assert(n_togo == req.result, "bug found");
        file.offset  = file.offset  + req.result;
        n_written = n_written + req.result;
        $file.buffer = $file.buffer - req.result;

        // second read
        if times == 2 then
            n_togo = n!-req.result;
            buf = _uv_buf_init(&&file.buffer[0], n_togo);
        end
    end

    escape n_written;
end

code/await UV_FS_Fstat (var& UV_FS_File file, var& _uv_stat_t stat) -> none
    throws Exception.Uv
do
    var _uv_fs_t req_fstat = _;
    do finalize with
        _uv_fs_req_cleanup(&&req_fstat);
    end

    var int ret;
    do
        ret = _ceu_uv_fs_fstat(&&req_fstat, file.handle);
    finalize (req_fstat) with
        _uv_fs_req_cleanup(&&req_fstat);
    end

    if ret < 0 then
        var Exception.Uv e = val Exception.Uv(_uv_strerror(ret) as _char&&, ret);
        throw e;
    end
    var _uv_fs_t&& req = await UV_FS until req==&&req_fstat;

    stat = *(req_fstat.ptr as _uv_stat_t&&);
end

native/pos do
    ##define ceu_uv_fs_open(a,b,c,d)    uv_fs_open(&ceu_uv_loop,a,b,c,d,ceu_uv_fs_cb)
    ##define ceu_uv_fs_close(a,b)       uv_fs_close(&ceu_uv_loop,a,b,ceu_uv_fs_close_cb)
    ##define ceu_uv_fs_close_(a,b)      uv_fs_close(&ceu_uv_loop,a,b,NULL); \\
                                        ceu_uv_fs_close_cb(a)
    ##define ceu_uv_fs_read(a,b,c,d,e)  uv_fs_read(&ceu_uv_loop,a,b,c,d,e,ceu_uv_fs_cb)
    ##define ceu_uv_fs_write(a,b,c,d,e) uv_fs_write(&ceu_uv_loop,a,b,c,d,e,ceu_uv_fs_cb)
    ##define ceu_uv_fs_fstat(a,b)       uv_fs_fstat(&ceu_uv_loop,a,b,ceu_uv_fs_cb)

    void ceu_uv_fs_cb (uv_fs_t* req) {
        ceu_input(CEU_INPUT_UV_FS, &req);
    }

    void ceu_uv_fs_close_cb (uv_fs_t* req) {
        //TODO???
        //assert(req->result == 0);
        uv_fs_req_cleanup(req);
    }
end

#endif
