#ifndef _UV_TCP_CEU
#define _UV_TCP_CEU

#include "uv/stream.ceu"

native/plain
    _uv_tcp_t,
;

native/nohold
    _ceu_uv_tcp_connect,    // TODO: diconnect?
    _uv_ip4_name,
    _uv_tcp_bind,           // TODO: unbind?
    _uv_tcp_getsockname,
;

native
    _ceu_uv_tcp_init,
;

native/pos do
    ##define ceu_uv_tcp_init(a) uv_tcp_init(&ceu_uv_loop, a);
    ##define ceu_uv_tcp_connect(a,b,c) uv_tcp_connect(a,b,c,ceu_uv_connect_cb)

    void ceu_uv_connect_cb (uv_connect_t* c, int err) {
        tceu_input_UV_STREAM_CONNECT p = { c, err };
        ceu_input(CEU_INPUT_UV_STREAM_CONNECT, &p);
        free(c);
    }
end

#define UV_TCP_Read(tcp, bytes) UV_Stream_Read((tcp) as _uv_stream_t&&, bytes)
#define UV_TCP_ReadLine(tcp, bytes) UV_Stream_ReadLine((tcp) as _uv_stream_t&&, bytes)

// TODO: receive two sizes (r/w), receive a bool to join r/w in one

code/await UV_TCP_Open (var int? buffer_size) -> (var UV_Stream stream) -> NEVER
    throws Exception.Uv
do
    if not buffer_size? then
        buffer_size = 1024;
    end

    var&? _uv_tcp_t tcp_ = &_malloc(sizeof(_uv_tcp_t))
        finalize (tcp_) with
            // free after "uv_close" below
        end;
    if not tcp_? then
        var Exception.Uv e = val Exception.Uv(_uv_strerror(_UV_EAI_MEMORY) as _char&&, _UV_EAI_MEMORY);
        throw e;
    end

    var[buffer_size!*] byte buffer;
    stream = val UV_Stream(&buffer, &tcp_! as _uv_stream_t&&);

    var _tceu_uv_stream_data data_ = _;
                             data_.vector = _PURIFY(&&stream.buffer);
                             data_.n      = 0;
    stream.handle._data = &&data_;

    var int err1;
    do
        err1 = _ceu_uv_tcp_init(&&tcp_!);
    finalize (tcp_) with
        _ceu_uv_close(&&tcp_! as _uv_handle_t&&);
    end
    if err1 != 0 then
        var Exception.Uv e = val Exception.Uv(_uv_strerror(err1) as _char&& ,err1);
        throw e;
    end

    var _uv_stream_t&& s;
    var int err2;
    (s,err2) = await UV_STREAM_ERROR until (s==(&&tcp_! as _uv_stream_t&&));
    var Exception.Uv e = val Exception.Uv(_uv_strerror(err2) as _char&&, err2);
    throw e;
end

code/await UV_TCP_Open_Bind_Listen (var _char&&? ip, var int port, var int? backlog, var int? buffer_size)
                                    -> (var& UV_Stream stream, event& none ok)
                                        -> NEVER
    throws Exception.Uv
do
    if not ip? then
        ip = "0.0.0.0";
    end

    var _sockaddr_in addr = _;
    _uv_ip4_addr(&&ip![0], port, &&addr);

    var& UV_TCP_Open tcp = spawn UV_TCP_Open(buffer_size);
    stream = &tcp.stream;
    _uv_tcp_bind(&&stream.handle as _uv_tcp_t&&, &&addr as _sockaddr&&, 0);
    var& UV_Stream_Listen l = spawn UV_Stream_Listen(&stream,backlog);
    ok = &l.ok;
    await FOREVER;
end

code/await UV_TCP_Connect (var _char&& ip, var int port, var int? buffer_size)
                            -> (var& UV_Stream stream, event none ok)
                                -> NEVER
    throws Exception.Uv
do
    var _sockaddr_in dest = _;
    _uv_ip4_addr(ip, port, &&dest);

    var& UV_TCP_Open tcp = spawn UV_TCP_Open(buffer_size);
    stream = &tcp.stream;
    var&? _uv_connect_t connect = &_malloc(sizeof(_uv_connect_t))
        finalize (connect) with
            // free on uv callback
        end

    _ceu_uv_tcp_connect(&&connect!, &&stream.handle as _uv_tcp_t&&, (&&dest as _sockaddr&&));

    var _uv_connect_t&& c;
    var int err2;
    (c,err2) = await UV_STREAM_CONNECT until c==&&connect!;
    if err2 != 0 then
        var Exception.Uv e = val Exception.Uv(_uv_strerror(err2) as _char&&, err2);
        throw e;
    end

    emit ok;
    await FOREVER;
end

#endif
