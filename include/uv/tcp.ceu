#ifndef _UV_TCP_CEU
#define _UV_TCP_CEU

#include "uv/stream.ceu"

native/plain
    _uv_tcp_t,
;

native/nohold
    _ceu_uv_tcp_connect,    // TODO: diconnect?
    _uv_tcp_bind,           // TODO: unbind?
    _uv_tcp_getsockname,
;

native
    _ceu_uv_tcp_init,
;

native/pos do
    ##define ceu_uv_tcp_init(a) uv_tcp_init(&ceu_uv_loop, a);
    ##define ceu_uv_tcp_connect(a,b,c) uv_tcp_connect(a,b,c,ceu_uv_connect_cb)

    void ceu_uv_connect_cb (uv_connect_t* c, int err) {
        tceu_input_UV_CONNECT p = { c, err };
        ceu_input(CEU_INPUT_UV_CONNECT, &p);
        free(c);
    }
end

#define UV_TCP_Listen(tcp, backlog) UV_Stream_Listen((tcp) as _uv_stream_t&&, backlog)
#define UV_TCP_Read(tcp, bytes) UV_Stream_Read((tcp) as _uv_stream_t&&, bytes)
#define UV_TCP_ReadLine(tcp, bytes) UV_Stream_ReadLine((tcp) as _uv_stream_t&&, bytes)
#define UV_TCP_Write(tcp, bytes) UV_Stream_Write((tcp) as _uv_stream_t&&, bytes)

code/await UV_TCP_Open (void) -> (var& _uv_tcp_t tcp) -> int // err
do
    var&? _uv_tcp_t tcp_ = &_malloc(sizeof(_uv_tcp_t))
        finalize (tcp_) with
            // free after "uv_close" below
        end;
    if not tcp_? then
        escape _UV_EAI_MEMORY;
    end

    tcp = &tcp_!;

    var int err1;
    do
        err1 = _ceu_uv_tcp_init(&&tcp_!);
    finalize (tcp_) with
        _ceu_uv_close(&&tcp_! as _uv_handle_t&&);
    end
    if err1 != 0 then
        escape err1;
    end

    var _uv_stream_t&& s;
    var int err2;
    (s,err2) = await UV_ERROR until (s==(&&tcp_! as _uv_stream_t&&));
    escape err2;
end

code/await UV_TCP_Connect (var _char&& ip, var int port)
                            -> (var& _uv_tcp_t tcp, event& void ok)
                                -> int  // err
do
    var& _uv_tcp_t tcp_;
    event void ok_;
    ok = &ok_;

    var _sockaddr_in dest = _;
    _uv_ip4_addr(ip, port, &&dest);

    var int? err1 =
        watching UV_TCP_Open() -> (&tcp_) do
            tcp = &tcp_;

            var&? _uv_connect_t connect = &_malloc(sizeof(_uv_connect_t))
                finalize (connect) with
                    // free on uv callback
                end

            _ceu_uv_tcp_connect(&&connect!, &&tcp_, (&&dest as _sockaddr&&));

            var _uv_connect_t&& c;
            var int err2;
            (c,err2) = await UV_CONNECT until c==&&connect!;
            _ceu_dbg_assert(err2 == 0);

            emit ok_;
            await FOREVER;
        end;
    escape err1!;    // can only reach here with "err" set
end

#endif
