#ifndef _UV_TCP_SERVER_CEU
#define _UV_TCP_SERVER_CEU

#include "uv/tcp.ceu"

#ifndef UV_TCP_SERVER_HANDLER_MAX
#define UV_TCP_SERVER_HANDLER_MAX
#endif

code/await UV_TCP_Server_Client (var& UV_Stream server, var int? buffer_size, var&? UV_TCP_Server_Data shared) -> none
do
    var Exception.Uv? e;
    catch e do
        var& UV_TCP_Open client = spawn UV_TCP_Open(_);
        var int ret = _uv_accept(&&server.handle, &&client.stream.handle);
        _ceu_sys_assert(ret == 0, "bug found");

    /*
        var _sockaddr_in sock = _;
        var int len = sizeof(_sockaddr_in) as int;
        var int ret = _uv_tcp_getsockname(&&client.tcp, (&&sock as _sockaddr&&), &&len);
        _ceu_dbg_assert(ret == 0);
        var int port = _ntohs(sock.sin_port);
    */

        await UV_TCP_Server_Handler(&client.stream, &shared);
    end
end

code/await UV_TCP_Server (var _char&&? ip, var int port, var int? backlog,
                          var int? buffer_size, var&? UV_TCP_Server_Data shared)
                            -> NEVER
    throws Exception.Uv
do
    var& UV_TCP_Open_Bind_Listen server = spawn UV_TCP_Open_Bind_Listen(ip,port,backlog,buffer_size);
// TODO: receive as argument?
    pool[UV_TCP_SERVER_HANDLER_MAX] UV_TCP_Server_Client cs;
    every server.ok do
        spawn UV_TCP_Server_Client(&server.stream, buffer_size, &shared) in cs;
    end
end

#endif
