#ifndef _UV_CEU
#define _UV_CEU

data Exception.Uv with
    var int number;
end

native/const
    _UV_EAI_MEMORY,
    _EACCES,
    _ECONNRESET,
    _ENOENT,
;

native/plain
    _mode_t,
    _uv_buf_t,
;

native/nohold
    _ceu_uv_tcp_getpeerport,
    _ceu_uv_tcp_getsockport,
    _uv_buf_init,
    _uv_strerror,
    _ID,
;

native/pre do
    ##include <uv.h>
    ##define CEU_CALLBACK_ENV CEU_CALLBACK_UV
    int ceu_callback_uv (int cmd, tceu_callback_val p1, tceu_callback_val p2
##ifdef CEU_FEATURES_TRACE
                        , tceu_trace trace
##endif
                        );
    tceu_callback CEU_CALLBACK_UV = { &ceu_callback_uv, NULL };
end

native/pos do
    ##define ID(x) x

    uv_loop_t    ceu_uv_loop;
    uv_check_t   ceu_uv_check;
    uv_prepare_t ceu_uv_prepare;
    uv_async_t   ceu_uv_async;

##ifndef CEU_UV_WCLOCK_DISABLE
    uv_timer_t   ceu_uv_timer;

    u64 ceu_uv_timer_old;

    s32 ceu_uv_dt (void) {
        u64 now = uv_now(&ceu_uv_loop);
        u32 dt = (now - ceu_uv_timer_old);
        ceu_uv_timer_old = now;
        return dt*1000;
    }

    void ceu_uv_timer_cb (uv_timer_t* timer) {
        ceu_assert_ex(timer == &ceu_uv_timer, "bug found (UV: timer)", CEU_TRACE_null);
        uv_async_send(&ceu_uv_async);
    }
##endif

    void ceu_uv_check_cb (uv_check_t* check) {
        CEU_THREADS_MUTEX_LOCK(&CEU_APP.threads_mutex);
    }

    void ceu_uv_prepare_cb (uv_prepare_t* prepare) {
        CEU_THREADS_MUTEX_UNLOCK(&CEU_APP.threads_mutex);
    }

    int ceu_callback_uv (int cmd, tceu_callback_val p1, tceu_callback_val p2
##ifdef CEU_FEATURES_TRACE
                        , tceu_trace trace
##endif
                        )
    {
        switch (cmd) {
            case CEU_CALLBACK_START:
                signal(SIGPIPE, SIG_IGN); // TODO: fails on "uv_write" would crash otherwise
                uv_loop_init(&ceu_uv_loop);
                uv_async_init(&ceu_uv_loop, &ceu_uv_async, NULL);
                uv_check_init(&ceu_uv_loop, &ceu_uv_check);
                uv_check_start(&ceu_uv_check, &ceu_uv_check_cb);
                uv_prepare_init(&ceu_uv_loop, &ceu_uv_prepare);
                uv_prepare_start(&ceu_uv_prepare, &ceu_uv_prepare_cb);

##ifndef CEU_UV_WCLOCK_DISABLE
                uv_timer_init(&ceu_uv_loop, &ceu_uv_timer);
                ceu_uv_timer_old = uv_now(&ceu_uv_loop);
##endif

                break;

            case CEU_CALLBACK_STEP:
                // TODO: detect/error if return w/o "escape"
                uv_run(&ceu_uv_loop, UV_RUN_ONCE);
                break;

            case CEU_CALLBACK_ASYNC_PENDING:
                uv_async_send(&ceu_uv_async);
                break;

            case CEU_CALLBACK_THREAD_TERMINATING: {
                uv_async_send(&ceu_uv_async);
                break;
            }

##ifndef CEU_UV_WCLOCK_DISABLE
            case CEU_CALLBACK_WCLOCK_DT:
                ceu_callback_ret.num = ceu_uv_dt();
                break;
            case CEU_CALLBACK_WCLOCK_MIN: {
                s32 us = p1.num;
                if (us == CEU_WCLOCK_INACTIVE) {
                    uv_timer_stop(&ceu_uv_timer);
                //} else if (us <= 0) {
                    //uv_async_send(&ceu_uv_async);
                } else {
                    if (us < 0) {
                        us = 0;
                    }
                    uv_timer_start(&ceu_uv_timer, ceu_uv_timer_cb, us/1000, 0);
                }
                break;
            }
##endif

            default:
                return 0;
        }

        return 1;
    }
end

#if 0

native @nohold
        _uv_inet_ntop(),
        _uv_tcp_getpeername(),

#endif

native/pre do
    int ceu_uv_tcp_getpeerport (uv_tcp_t* tcp) {
        sockaddr_in name;
        int namelen = sizeof(name);
        int ret = uv_tcp_getpeername(tcp, (sockaddr*)&name, &namelen);
        if (ret != 0) {
            return ret;
        }
        char addr[128];
        ret = uv_inet_ntop(AF_INET, &name.sin_addr, addr, sizeof(addr));
        if (ret != 0) {
            return ret;
        }
        int port = ntohs(name.sin_port);
        return port;
    }

    int ceu_uv_tcp_getsockport (uv_tcp_t* tcp) {
        sockaddr_in name;
        int namelen = sizeof(name);
        int ret = uv_tcp_getsockname(tcp, (sockaddr*)&name, &namelen);
        if (ret != 0) {
            return ret;
        }
        char addr[128];
        ret = uv_inet_ntop(AF_INET, &name.sin_addr, addr, sizeof(addr));
        if (ret != 0) {
            return ret;
        }
        int port = ntohs(name.sin_port);
        return port;
    }
end

#define GET_BE16TOH(bytes,off) do                       \
    var[2] byte ceu_uv_vec;                             \
    _ceu_vector_copy(&&ceu_uv_vec,0, &&bytes,off, 2);   \
    escape {be16toh(*((u16*) @(&&ceu_uv_vec[0])))};     \
end

#define GET_BE32TOH(bytes,off) do                       \
    var[4] byte ceu_uv_vec;                             \
    _ceu_vector_copy(&&ceu_uv_vec,0, &&bytes,off, 4);   \
    escape {be32toh(*((u32*) @(&&ceu_uv_vec[0])))};     \
end

#define GET_BE64TOH(bytes,off) do                       \
    var[8] byte ceu_uv_vec;                             \
    _ceu_vector_copy(&&ceu_uv_vec,0, &&bytes,off, 8);   \
    escape {be64toh(*((u64*) @(&&ceu_uv_vec[0])))};     \
end

#define PUT_NETWORK_U32(bytes,off,host)                                             \
    do                                                                              \
        var u32 network = _htonl(host);                                             \
        _ceu_vector_buf_set(&&(bytes), off, (&&network as byte&&), sizeof(u32));    \
    end

#define PUT_HTOBE16(bytes,off,host)                                         \
    do                                                                      \
        var u16 be = {htobe16(@(host))};                                    \
        _ceu_vector_buf_set(&&(bytes), off, (&&be as byte&&), sizeof(u16)); \
    end

#define PUT_HTOBE32(bytes,off,host)                                         \
    do                                                                      \
        var u32 be = {htobe32(@(host))};                                    \
        _ceu_vector_buf_set(&&(bytes), off, (&&be as byte&&), sizeof(u32)); \
    end

#define PUT_HTOBE64(bytes,off,host)                                         \
    do                                                                      \
        var u64 be = {htobe64(@(host))};                                    \
        _ceu_vector_buf_set(&&(bytes), off, (&&be as byte&&), sizeof(u64)); \
    end

#endif
