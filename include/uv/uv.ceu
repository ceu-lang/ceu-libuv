#ifndef _UV_CEU
#define _UV_CEU

native/const
    _UV_EAI_MEMORY,
;

native/plain
    _mode_t,
    _uv_buf_t,
;

native/nohold
    _uv_buf_init,
    _uv_strerror,
;

native/pre do
    ##include <uv.h>
end

native/pos do
    ##define ceu_callback_env(cmd,evt,params) ceu_uv_callback(cmd,evt,params)

    uv_loop_t  ceu_uv_loop;
    uv_async_t ceu_uv_async;

    uv_timer_t ceu_uv_timer;
    s32 ceu_uv_timer_next_us;
    void ceu_uv_timer_cb (uv_timer_t* timer) {
        ceu_dbg_assert(timer == &ceu_uv_timer);
        s32 us = ceu_uv_timer_next_us;
        ceu_input(CEU_INPUT__WCLOCK, &us);
    }

    tceu_callback_ret ceu_uv_callback (int cmd, tceu_callback_arg p1, tceu_callback_arg p2)
    {
        tceu_callback_ret ret = { .is_handled=1 };

        switch (cmd) {
            case CEU_CALLBACK_START:
                signal(SIGPIPE, SIG_IGN); // TODO: fails on "uv_write" would crash otherwise
                uv_loop_init(&ceu_uv_loop);
                uv_async_init(&ceu_uv_loop, &ceu_uv_async, NULL);
                uv_timer_init(&ceu_uv_loop, &ceu_uv_timer);
                break;

            case CEU_CALLBACK_STEP:
                // TODO: detect/error if return w/o "escape"
                uv_run(&ceu_uv_loop, UV_RUN_ONCE);
                break;

            case CEU_CALLBACK_ASYNC_PENDING:
                uv_async_send(&ceu_uv_async);
                ret.is_handled = 0;
                break;

            case CEU_CALLBACK_THREAD_TERMINATING:
                uv_async_send(&ceu_uv_async);
                ret.is_handled = 0;
                break;

            case CEU_CALLBACK_WCLOCK_MIN: {
                s32 us = p1.num;
                if (us == CEU_WCLOCK_INACTIVE) {
                    uv_timer_stop(&ceu_uv_timer);
                } else if (us <= 0) {
                    ceu_uv_timer_next_us = 0;
                    uv_timer_start(&ceu_uv_timer, ceu_uv_timer_cb, 0, 0);
                } else {
                    ceu_uv_timer_next_us = us;
                    uv_timer_start(&ceu_uv_timer, ceu_uv_timer_cb,
                                   ceu_uv_timer_next_us/1000, 0);
                }
                break;
            }

            default:
                ret.is_handled = 0;
        }

        return ret;
    }
end

#if 0

native @pure
        _GET_HOST_U32(),

native @nohold
        _ceu_uv_tcp_getpeerport(),
        _ceu_uv_tcp_getsockport(),
        _uv_inet_ntop(),
        _uv_tcp_getpeername(),

native do
    int ceu_uv_tcp_getpeerport (uv_tcp_t* tcp) {
        sockaddr_in name;
        int namelen = sizeof(name);
        uv_tcp_getpeername(tcp, (sockaddr*)&name, &namelen);
        char addr[16];
        uv_inet_ntop(AF_INET, &name.sin_addr, addr, sizeof(addr));
        int port = ntohs(name.sin_port);
        //_printf("%s:%d\n", (_char&&)&&addr, port);
        return port;
    }
    int ceu_uv_tcp_getsockport (uv_tcp_t* tcp) {
        sockaddr_in name;
        int namelen = sizeof(name);
        uv_tcp_getsockname(tcp, (sockaddr*)&name, &namelen);
        char addr[16];
        uv_inet_ntop(AF_INET, &name.sin_addr, addr, sizeof(addr));
        int port = ntohs(name.sin_port);
        //_printf("%s:%d\n", (_char&&)&&addr, port);
        return port;
    }
end

#define GET_HOST_U32(bytes,off) _ntohl(*((u32&&)&&(((_byte&&)&&bytes)[off])))

#define PUT_NETWORK_U32(bytes,off,host)             \
    do                                              \
        var u32 network = _htonl(host);             \
        _ceu_vector_copy_buffer(&&(bytes), off,     \
                                (byte&&)&&network,  \
                                sizeof(u32),1);     \
    end

#endif
#endif
