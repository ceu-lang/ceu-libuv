#ifndef _UV_CEU
#define _UV_CEU

data Exception.Uv with
    var int number;
end

native/const
    _UV_EAI_MEMORY,
    _EACCES,
    _ECONNRESET,
    _ENOENT,
;

native/plain
    _mode_t,
    _uv_buf_t,
;

native/nohold
    _ceu_uv_tcp_getpeerport,
    _ceu_uv_tcp_getsockport,
    _uv_buf_init,
    _uv_strerror,
    _ID,
;

native/pre do
    ##include <uv.h>
    ##define CEU_CALLBACK_ENV CEU_CALLBACK_UV
    tceu_callback_ret ceu_callback_uv (int cmd, tceu_callback_arg p1, tceu_callback_arg p2, const char* file, u32 line);
    tceu_callback CEU_CALLBACK_UV = { &ceu_callback_uv, NULL };
end

native/pos do
    ##define ID(x) x

    uv_loop_t  ceu_uv_loop;
    uv_async_t ceu_uv_async;
    uv_timer_t ceu_uv_timer;

    u64 ceu_uv_timer_old;

    s32 ceu_uv_dt (void) {
        u64 now = uv_now(&ceu_uv_loop);
        u32 dt = (now - ceu_uv_timer_old);
        ceu_uv_timer_old = now;
        return dt*1000;
    }

    void ceu_uv_timer_cb (uv_timer_t* timer) {
        ceu_sys_assert(timer == &ceu_uv_timer, "bug found");
        uv_async_send(&ceu_uv_async);
    }

    tceu_callback_ret ceu_callback_uv (int cmd, tceu_callback_arg p1, tceu_callback_arg p2, const char* file, u32 line)
    {
        tceu_callback_ret ret = { .is_handled=1 };

        switch (cmd) {
            case CEU_CALLBACK_START:
                signal(SIGPIPE, SIG_IGN); // TODO: fails on "uv_write" would crash otherwise
                uv_loop_init(&ceu_uv_loop);
                uv_async_init(&ceu_uv_loop, &ceu_uv_async, NULL);
                uv_timer_init(&ceu_uv_loop, &ceu_uv_timer);
                ceu_uv_timer_old = uv_now(&ceu_uv_loop);
                break;

            case CEU_CALLBACK_STEP:
                // TODO: detect/error if return w/o "escape"
                uv_run(&ceu_uv_loop, UV_RUN_ONCE);
                break;

            case CEU_CALLBACK_ASYNC_PENDING:
                uv_async_send(&ceu_uv_async);
                break;

            case CEU_CALLBACK_THREAD_TERMINATING: {
                uv_async_send(&ceu_uv_async);
                break;
            }

            case CEU_CALLBACK_WCLOCK_DT:
                ret.value.num = ceu_uv_dt();
                break;
            case CEU_CALLBACK_WCLOCK_MIN: {
                s32 us = p1.num;
                if (us == CEU_WCLOCK_INACTIVE) {
                    uv_timer_stop(&ceu_uv_timer);
                //} else if (us <= 0) {
                    //uv_async_send(&ceu_uv_async);
                } else {
                    if (us < 0) {
                        us = 0;
                    }
                    uv_timer_start(&ceu_uv_timer, ceu_uv_timer_cb, us/1000, 0);
                }
                break;
            }

            default:
                ret.is_handled = 0;
        }

        return ret;
    }
end

#if 0

native @pure
        _GET_HOST_U32(),

native @nohold
        _uv_inet_ntop(),
        _uv_tcp_getpeername(),

#endif

native/pre do
    int ceu_uv_tcp_getpeerport (uv_tcp_t* tcp) {
        sockaddr_in name;
        int namelen = sizeof(name);
        uv_tcp_getpeername(tcp, (sockaddr*)&name, &namelen);
        char addr[16];
        uv_inet_ntop(AF_INET, &name.sin_addr, addr, sizeof(addr));
        int port = ntohs(name.sin_port);
        //_printf("%s:%d\n", (_char&&)&&addr, port);
        return port;
    }

    int ceu_uv_tcp_getsockport (uv_tcp_t* tcp) {
        sockaddr_in name;
        int namelen = sizeof(name);
        uv_tcp_getsockname(tcp, (sockaddr*)&name, &namelen);
        char addr[16];
        uv_inet_ntop(AF_INET, &name.sin_addr, addr, sizeof(addr));
        int port = ntohs(name.sin_port);
        //_printf("%s:%d\n", (_char&&)&&addr, port);
        return port;
    }
end

#define GET_HOST_U32(bytes,off) _ntohl(*(&&((_ID(&&bytes[0]))[off]) as u32&&))

#define PUT_NETWORK_U32(bytes,off,host)                                 \
    do                                                                  \
        var u32 network = _htonl(host);                                 \
        _ceu_vector_buf_set(&&(bytes), off, (&&network as byte&&), sizeof(u32));    \
    end

#endif
