#if 0
#@ Description: Parallel "echo" servers.
#@  - same as `tcp-02.ceu`
#@  - executes two servers
#@ Usage:
#@  - connect "telnet" clients to port 7000 or 7001
#@  - write long string
#@      - ERROR!
#@ Features:
#@  - code Server
#endif

#include "uv/tcp.ceu"

#define DEFAULT_PORT 7000
#define BUFFER_MAX     10

code/await Client (var& UV_Stream server) -> none
do
    var Exception.Uv? e;
    catch e do
        var& UV_TCP_Open client = spawn UV_TCP_Open(BUFFER_MAX);
        var int ret = _uv_accept(&&server.handle, &&client.stream.handle);
        _ceu_dbg_assert(ret == 0);

        loop do
            var ssize n = await UV_Stream_Read_N(&client.stream, _);
            _ceu_dbg_assert(n >= 0);
            client.stream.buffer = client.stream.buffer .. [{'\0'}];

            await UV_Stream_Write_N(&client.stream, $client.stream.buffer-1);
            $client.stream.buffer = 0;
        end
    end
    _fprintf(_stderr, "[client]: %s\n", e!.message);
end

code/await Server (var _char&& ip, var int port, var int? backlog, var int? buffer_size) -> none
    throws Exception.Uv
do
    var&? UV_TCP_Open_Bind_Listen server = spawn UV_TCP_Open_Bind_Listen(ip,port,backlog,buffer_size);
    watching server do
        pool[10] Client cs;
        every server.ok do
            spawn Client(&server.stream) in cs;
        end
    end
end

spawn Server("0.0.0.0", DEFAULT_PORT+0, _, _);
spawn Server("0.0.0.0", DEFAULT_PORT+1, _, _);

_printf("I will terminate after 10s...\n");
await 10s;
_printf("DONE!\n");
escape 0;
