#if 0
#@ Description: Parallel "echo" servers.
#@  - same as `tcp-02.ceu`
#@  - executes two servers
#@ Usage:
#@  - connect "telnet" clients to port 7000 or 7001
#@  - write long string
#@      - ERROR!
#@ Features:
#@  - code Server
#endif

#include "uv/tcp.ceu"

#define DEFAULT_PORT 7000
#define BUFFER_MAX     10

code/await Client (var& UV_Stream server) -> void
do
    var&? UV_TCP_Open client = spawn UV_TCP_Open(_);
    var int? err1 =
        watching client do
            var int ret = _uv_accept(&&server.handle, &&client.stream.handle);
            _ceu_dbg_assert(ret == 0);

            // READ/WRITE LOOP

            var[BUFFER_MAX] byte buf;

            spawn do
                var _uv_stream_t&& s;
                var int            err2;
                every (s,err2) in UV_STREAM_ERROR do
                    _fprintf(_stderr, "[error]: %s\n", _uv_strerror(err2));
                end
            end

            loop do
                var ssize n = await UV_Stream_Read_N(&client.stream, _);
                _ceu_dbg_assert(n >= 0);
                client.stream.buffer = client.stream.buffer .. [{'\0'}];

                // WRITE
                await UV_Stream_Write_N(&client.stream, $client.stream.buffer-1);
                $client.stream.buffer = 0;
            end
        end;

    if err1? then
        _fprintf(_stderr, "[client]: %s\n", _uv_strerror(err1!));
    end
end

code/await Server (var _char&& ip, var int port, var int? backlog, var int? buffer_size) -> void
do
    var&? UV_TCP_Open_Bind_Listen server = spawn UV_TCP_Open_Bind_Listen(ip,port,backlog,buffer_size);
    watching server do
        pool[10] Client cs;
        every server.ok do
            spawn Client(&server.stream) in cs;
        end
    end
end

spawn Server("0.0.0.0", DEFAULT_PORT+0, _, _);
spawn Server("0.0.0.0", DEFAULT_PORT+1, _, _);

_printf("I will terminate after 10s...\n");
await 10s;
_printf("DONE!\n");
escape 0;
