#if 0
#@ Description: Parallel "echo" servers.
#@  - same as `tcp-02.ceu`
#@  - executes two servers
#@ Usage:
#@  - connect "telnet" clients to port 7000 or 7001
#@  - write long string
#@      - ERROR!
#@ Features:
#@  - code Server
#endif

#include "uv/tcp.ceu"

#define DEFAULT_PORT    7000
#define DEFAULT_BACKLOG 128
#define BUFFER_MAX      10

code/await Client (var& _uv_tcp_t server) -> void
do
    var&? UV_TCP_Open client = spawn UV_TCP_Open();
    var int? err1 =
        watching client do
            var int ret = _uv_accept(&&server as _uv_stream_t&&, &&client.tcp as _uv_stream_t&&);
            _ceu_dbg_assert(ret == 0);

            // READ/WRITE LOOP

            vector[BUFFER_MAX] byte buf;

            spawn do
                var _uv_stream_t&& s;
                var int            err2;
                every (s,err2) in UV_STREAM_ERROR do
                    _fprintf(_stderr, "[error]: %s\n", _uv_strerror(err2));
                end
            end

            loop do
                do
                    var&? UV_Stream_Read read = spawn UV_TCP_Read(&client.tcp,&buf);
                    var int? err2 =
                        watching read do
                            await read.ok;
                        end;
                    _ceu_dbg_assert(not err2?);
                end

                // WRITE
                buf = buf..[{'\0'}];
                await UV_TCP_Write(&client.tcp, &buf);
            end
        end;

    if err1? then
        _fprintf(_stderr, "[client]: %s\n", _uv_strerror(err1!));
    end
end

code/await Server (var _char&& ip, var int port, var int backlog) -> void
do
    var&? UV_TCP_Open_Bind_Listen server = spawn UV_TCP_Open_Bind_Listen(ip,port,DEFAULT_BACKLOG);
    watching server do
        pool[10] Client cs;
        every server.ok do
            spawn Client(&server.tcp) in cs;
        end
    end
end

spawn Server("0.0.0.0", DEFAULT_PORT+0, DEFAULT_BACKLOG);
spawn Server("0.0.0.0", DEFAULT_PORT+1, DEFAULT_BACKLOG);

_printf("I will terminate after 10s...\n");
await 10s;
_printf("DONE!\n");
escape 0;
