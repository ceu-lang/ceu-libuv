#if 0
#@ Description: 2 "echo" servers & 4 "echo" clients
#@  - stop 1 server after 5s
#@      - 2 clients terminate
#@ Features:
#@  - UV_TCP_Server, UV_TCP_Client
#endif

#include "uv/tcp.ceu"

data UV_TCP_Server_Data;

code/await UV_TCP_Server_Handler (var& UV_Stream stream, var&? UV_TCP_Server_Data d) -> int
do
    loop do
        await UV_Stream_Read_N(&stream, _);
        stream.buffer = stream.buffer..[{'\0'}];
        _printf("[server %p] %s", &&stream, &&stream.buffer[0]);
        await UV_Stream_Write_N(&stream, _);
    end
end

#include "uv/tcp-server.ceu"

#define PORT    7000
#define BACKLOG 128

code/await Client (var int port) -> void do
    var&? UV_TCP_Connect c = spawn UV_TCP_Connect("127.0.0.1", port, _);
    watching c do
        await c.ok;

        _printf("I will terminate after 10s...\n");

        loop do
            await 1s;
            c.stream.buffer = [] .. "Alo mundo!\n";
            await UV_Stream_Write_N(&c.stream,_);
// change to 0 to generate "write" errors instead of "read" errors
#if 1
            await UV_Stream_Read_N(&c.stream,_);
#endif
            _printf("[client] %s", &&c.stream.buffer[0]);
        end
    end
end

_printf("I will terminate after 10s...\n");

watching 10s do
    var UV_TCP_Server_Data d = _;
    par do
        await UV_TCP_Server("0.0.0.0", PORT+0, _, _, &d);
    with
        watching 5s do
            await UV_TCP_Server(_, PORT+1, BACKLOG, _, _);
        end
        _printf("[server %d] stop\n", PORT+1);
    with
        await Client(PORT+0);
        _printf("[client %d] stop\n", PORT+0);
    with
        await Client(PORT+0);
        _printf("[client %d] stop\n", PORT+0);
    with
        await Client(PORT+1);
        _printf("[client %d] stop\n", PORT+1);
    with
        await Client(PORT+1);
        _printf("[client %d] stop\n", PORT+1);
    end
end

_printf("DONE!\n");
escape 0;
