#if 0
#@ Description: 2 "echo" servers & 4 "echo" clients
#@  - stop 1 server after 5s
#@      - 2 clients terminate
#@ Features:
#@  - UV_TCP_Server, UV_TCP_Client
#endif

#include "uv/tcp.ceu"

code/await UV_TCP_Server_Handler (var& _uv_tcp_t tcp) -> int
do
    loop do
        vector[] byte string;
        await UV_TCP_ReadLine(&tcp, &string);
        string = string..[{'\0'}];
        _printf("[server %p] %s", &&tcp, &&string[0]);
        await UV_TCP_Write(&tcp, &string);
    end
end

#include "uv/tcp-server.ceu"

#define PORT    7000
#define BACKLOG 128

code/await Client (var int port) -> void do
    var&? UV_TCP_Connect c = spawn UV_TCP_Connect("127.0.0.1", port);
    watching c do
        await c!.ok;

        _printf("I will terminate after 10s...\n");

        loop do
            await 1s;
            vector[] byte string = [] .. "Alo mundo!\n";
            await UV_TCP_Write(&c!.tcp, &string);
// change to 0 to generate "write" errors instead of "read" errors
#if 1
            await UV_TCP_ReadLine(&c!.tcp, &string);
#endif
            _printf("[client] %s", &&string[0]);
        end
    end
end

_printf("I will terminate after 10s...\n");

watching 10s do
    par do
        await UV_TCP_Server("0.0.0.0", PORT+0, BACKLOG);
    with
        watching 5s do
            await UV_TCP_Server("0.0.0.0", PORT+1, BACKLOG);
        end
        _printf("[server %d] stop\n", PORT+1);
    with
        await Client(PORT+0);
        _printf("[client %d] stop\n", PORT+0);
    with
        await Client(PORT+0);
        _printf("[client %d] stop\n", PORT+0);
    with
        await Client(PORT+1);
        _printf("[client %d] stop\n", PORT+1);
    with
        await Client(PORT+1);
        _printf("[client %d] stop\n", PORT+1);
    end
end

_printf("DONE!\n");
escape 0;
