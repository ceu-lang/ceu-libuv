#if 0
#@ Description: Sequential "echo" server.
#@  - one port: 7000
#@  - one client at a time
#@  - one read / write at a time
#@  - dies if reads BUFFER_MAX at a time
#@ Usage:
#@  - connect a "netcat" client to port 7000
#@      - nc localhost 7000
#@      - write anything
#@      - read the "echo"
#@  - connect another "netcat" client to port 7000
#@      - write anything
#@      - no "echo"
#@      - close first client
#@      - read the "echo"
#@  - write long string
#@      - ERROR! ("out of bounds")
#@ Features:
#@  - UV_STREAM_ERROR, UV_STREAM_LISTEN, UV_STREAM_READ, UV_STREAM_WRITE
#endif

#include "uv/tcp.ceu"

#define DEFAULT_PORT    7000
#define DEFAULT_BACKLOG 128
#define BUFFER_MAX      10

var _uv_tcp_t server = _;
do
    _ceu_uv_tcp_init(&&server);
finalize (server) with
    _uv_close(&&server as _uv_handle_t&&, null);
end

var _sockaddr_in addr = _;
_uv_ip4_addr("0.0.0.0", DEFAULT_PORT, &&addr);
_uv_tcp_bind(&&server, &&addr as _sockaddr&&, 0);
do
    var int ret = _ceu_uv_listen(&&server as _uv_stream_t&&, DEFAULT_BACKLOG);
    _ceu_assert(ret == 0, "bug found");
end

_printf("I will terminate after two connections...\n");

var int i;
loop i in [0 -> 2[ do
    _printf(">>> %d\n", i);

    // ACCEPT
    var&? _uv_tcp_t client_ = &_malloc(sizeof(_uv_tcp_t))
        finalize (client_) with
            // free after uv_close
        end;
    var& _uv_tcp_t client = &client_!;
    do
        _ceu_uv_tcp_init(&&client);
    finalize (client) with
        _ceu_uv_close(&&client as _uv_handle_t&&);
    end

    loop do
        var int ret = _uv_accept(&&server as _uv_stream_t&&,&&client as _uv_stream_t&&);
        if ret == 0 then
            break;
        else
            // LISTEN
            var _uv_stream_t&& s;
            var int status;
            (s,status) = await UV_STREAM_LISTEN until s==(&&server as _uv_stream_t&&);
            _ceu_assert(status >= 0, "bug found");
        end
    end

    // READ/WRITE LOOP

    var[BUFFER_MAX] byte buf;
    var ssize n_read = 0;

    par/or do
        var _uv_stream_t&& s;
        var int            err;
        every (s,err) in UV_STREAM_ERROR do
            _fprintf(_stderr, "[error]: %s\n", _uv_strerror(err));
            if err == {UV_EOF} then
                break;
            end
        end
    with
        loop do
            // READ
            do
                $buf = 0;
                var _tceu_uv_stream_data data_ = _;
                                         data_.vector = _PURIFY(&&buf);
                                         data_.n_req  = 0;
                                         data_.n_togo  = 0;
                client._data = _PURIFY(&&data_); // finalize below

                var int ret;
                do
                    ret = _ceu_uv_read_start(&&client as _uv_stream_t&&);
                finalize (client) with
                    // finalize after each UV_STREAM_READ
                    _uv_read_stop(&&client as _uv_stream_t&&);
                end
                //_printf("error: %s\n", _uv_strerror(ret));
                _ceu_assert(ret == 0, "bug found");

                var _uv_stream_t&& s;
                (s,n_read) = await UV_STREAM_READ until s==(&&client as _uv_stream_t&&);
                //_ceu_assert((_byte&&)buf_r:base == ((_byte&&)&&buf), "bug found");
                //_ceu_assert(buf_r:len == $$buf, "bug found");
            end
            //_ceu_assert(n_read >= 0);  // connection closed?
            if n_read < 0 then
                _fprintf(_stderr, "[read]: %s\n", _uv_strerror(n_read));
                break;
            else/if n_read == 0 then
                _ceu_assert(0, "bug found");
            end

            // not reading anymore

            // WRITE
            buf = buf..[{'\0'}];
            var&? _uv_write_t req_write = &_malloc(sizeof(_uv_write_t))
                finalize (req_write) with
                    // free on uv callback
                end;
            var _uv_buf_t buf_ = _uv_buf_init(&&buf[0], n_read);
            _ceu_uv_write(&&req_write!, &&client as _uv_stream_t&&, &&buf_);
            var _uv_write_t&& w;
            var int status;
            (w, status) = await UV_STREAM_WRITE until w==&&req_write!;
            _ceu_assert(status == 0, "bug found");
        end
    end
end

_printf("DONE!\n");
escape 0;
