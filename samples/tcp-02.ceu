#if 0
#@ Description: Parallel "echo" server.
#@  - same as `tcp-01.ceu`
#@  - accepts multiple clients at the same time
#@ Usage:
#@  - connect "telnet" clients to port 7000
#@  - write long string
#@      - ERROR!
#@ Features:
#@  - code Client
#@  - uses UV_Open/Listen/Read/Write
#endif

#include "uv/tcp.ceu"

#define DEFAULT_PORT    7000
#define BUFFER_MAX      10

code/await Client (var& UV_Stream server) -> void
do
    var&? UV_TCP_Open client = spawn UV_TCP_Open(_);
    var int? err1 =
        watching client do
            var int ret = _uv_accept(&&server.handle, &&client.stream.handle);
            _ceu_dbg_assert(ret == 0);

            // READ/WRITE LOOP

            var[BUFFER_MAX] byte buf;

            spawn do
                var _uv_stream_t&& s;
                var int            err2;
                every (s,err2) in UV_STREAM_ERROR do
                    _fprintf(_stderr, "[error]: %s\n", _uv_strerror(err2));
                end
            end

            loop do
                do
                    var&? UV_Stream_Read read = spawn UV_TCP_Read(&client.stream.handle,&buf);
                    var int? err2 =
                        watching read do
                            await read.ok;
                        end;
                    _ceu_dbg_assert(not err2?);
                end

                // WRITE
                buf = buf..[{'\0'}];
                await UV_TCP_Write(&client.stream.handle, &buf);
            end
        end;

    if err1? then
        _fprintf(_stderr, "[client]: %s\n", _uv_strerror(err1!));
    end
end

_printf("I will terminate after 10s...\n");

var&? UV_TCP_Open server = spawn UV_TCP_Open(_);
watching server do
    var _sockaddr_in addr = _;
    _uv_ip4_addr("0.0.0.0", DEFAULT_PORT, &&addr);
    _uv_tcp_bind(&&server.stream.handle as _uv_tcp_t&&, &&addr as _sockaddr&&, 0);

    var&? UV_Stream_Listen listen = spawn UV_Stream_Listen(&server.stream,_);
    watching listen do
        pool[10] Client cs;
        watching 10s do
            every listen.ok do
                spawn Client(&server.stream) in cs;
            end
        end
    end
end

_printf("DONE!\n");
escape 0;
