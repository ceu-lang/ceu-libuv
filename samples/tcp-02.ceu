#if 0
#@ Description: Parallel "echo" server.
#@  - same as `tcp-01.ceu`
#@  - accepts multiple clients at the same time
#@ Usage:
#@  - connect "telnet" clients to port 7000
#@  - write long string
#@      - ERROR! (no because the underlying buffer holds it)
#@ Features:
#@  - code Client
#@  - uses UV_Open/Listen/Read/Write
#endif

#include "uv/tcp.ceu"

#define DEFAULT_PORT    7000
#define BUFFER_MAX      10

code/await Client (var& UV_Stream server) -> none
do
    var Exception.Uv? e;
    catch e do
        var& UV_TCP_Open client = spawn UV_TCP_Open(BUFFER_MAX);
        var int ret = _uv_accept(&&server.handle, &&client.stream.handle);
        _ceu_dbg_assert(ret == 0);

        loop do
            await UV_Stream_Read_N(&client.stream,_);
            await UV_Stream_Write_N(&client.stream,_);
        end
    end
    _fprintf(_stderr, "[error]: %s\n", e!.message);
end

_printf("I will terminate after 10s...\n");

var& UV_TCP_Open server = spawn UV_TCP_Open(BUFFER_MAX);
var _sockaddr_in addr = _;
_uv_ip4_addr("0.0.0.0", DEFAULT_PORT, &&addr);
_uv_tcp_bind(&&server.stream.handle as _uv_tcp_t&&, &&addr as _sockaddr&&, 0);

var& UV_Stream_Listen listen = spawn UV_Stream_Listen(&server.stream,_);
pool[10] Client cs;
watching 10s do
    every listen.ok do
        spawn Client(&server.stream) in cs;
    end
end

_printf("DONE!\n");
escape 0;
