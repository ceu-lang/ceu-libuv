#if 0
#@ Description: Parallel "echo" servers.
#@  - same as `tcp-03.ceu`
#@  - server "7000" echoes back on every character
#@  - server "7001" echoes back on every line
#@ Features:
#@  - class Handler0, Handler1
#@  - uses UV_Read_Line
#endif

#include "uv/tcp.ceu"

#define DEFAULT_PORT    7000
#define DEFAULT_BACKLOG 128
#define BUFFER_MAX      10

code/await Handler0 (var& _uv_tcp_t tcp) -> int
do
    loop do
        vector[] byte string;
        do
            event& usize ok_read;
            watching UV_TCP_Read(&tcp, &string)
                        -> (&ok_read)
            do
                await ok_read;
            end
        end
        string = string..[{'\0'}];
        _printf("[handler-0] %s\n", &&string[0]);
        await UV_TCP_Write(&tcp, &string);
    end
end

code/await Handler1 (var& _uv_tcp_t tcp) -> int
do
    loop do
        vector[] byte string;
        await UV_TCP_ReadLine(&tcp, &string);
        string = string..[{'\0'}];
        _printf("[handler-1] %s", &&string[0]);
        await UV_TCP_Write(&tcp, &string);
    end
end

code/await Client (var& _uv_tcp_t server) -> void
do
    var& _uv_tcp_t client;
    var int? err =
        watching UV_TCP_Open() -> (&client) do
            var int ret1 = _uv_accept(&&server as _uv_stream_t&&, &&client as _uv_stream_t&&);
            _ceu_dbg_assert(ret1 == 0);

            var _sockaddr_in sock = _;
            var int len = sizeof(_sockaddr_in) as int;
            var int ret2 = _uv_tcp_getsockname(&&client, (&&sock as _sockaddr&&), &&len);
            _ceu_dbg_assert(ret2 == 0);
            var int port = _ntohs(sock.sin_port);

            if port == DEFAULT_PORT then
                await Handler0(&client);
            else/if port == DEFAULT_PORT+1 then
                await Handler1(&client);
            else
                _ceu_dbg_assert(0);
            end
        end;

    if err? then
        _fprintf(_stderr, "[client]: %s\n", _uv_strerror(err!));
    end
end

code/await Server (var _char&& ip, var int port, var int backlog) -> void
do
    var& _uv_tcp_t server;
    event& void ok_listen;
    watching UV_TCP_Open_Bind_Listen(ip,port,DEFAULT_BACKLOG) -> (&server,&ok_listen)
    do
        pool[10] Client cs;
        every ok_listen do
            spawn Client(&server) in cs;
        end
    end
end

spawn Server("0.0.0.0", DEFAULT_PORT+0, DEFAULT_BACKLOG);
spawn Server("0.0.0.0", DEFAULT_PORT+1, DEFAULT_BACKLOG);

_printf("I will terminate after 10s...\n");
await 10s;
_printf("DONE!\n");
escape 0;
