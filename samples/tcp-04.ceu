#if 0
#@ Description: Parallel "echo" servers.
#@  - same as `tcp-03.ceu`
#@  - server "7000" echoes back on every character
#@  - server "7001" echoes back on every line
#@ Features:
#@  - class Handler0, Handler1
#@  - uses UV_Read_Line
#endif

#include "uv/tcp.ceu"

#define DEFAULT_PORT    7000
#define BUFFER_MAX      10

code/await Handler0 (var& UV_Stream client) -> int
    throws Exception.Uv
do
    loop do
        await UV_Stream_Read_N(&client,_);
        client.buffer = client.buffer..[{'\0'}];
        _printf("[handler-0] %s\n", &&client.buffer[0]);
        await UV_Stream_Write_N(&client,_);
    end
end

code/await Handler1 (var& UV_Stream client) -> int
    throws Exception.Uv
do
    loop do
        var[] byte line;
        await UV_Stream_Read_Line(&client, &line);
        line = line..[{'\n'},{'\0'}];
        var[] byte tmp = []..client.buffer;
        _printf("[handler-1] %s", &&line[0]);
        $line = $line-1;
        client.buffer = []..line;
        await UV_Stream_Write_N(&client,_);
        client.buffer = []..tmp;
    end
end

code/await Client (var& UV_Stream server) -> none
do
    var Exception.Uv? e;
    catch e do
        var& UV_TCP_Open client = spawn UV_TCP_Open(_);
        var int ret1 = _uv_accept(&&server.handle, &&client.stream.handle);
        _ceu_assert(ret1 == 0, "bug found");

        var _sockaddr_in sock = _;
        var int len = sizeof(_sockaddr_in) as int;
        var int ret2 = _uv_tcp_getsockname(&&client.stream.handle as _uv_tcp_t&&, (&&sock as _sockaddr&&), &&len);
        _ceu_assert(ret2 == 0, "bug found");
        var int port = _ntohs(sock.sin_port);

        if port == DEFAULT_PORT then
            await Handler0(&client.stream);
        else/if port == DEFAULT_PORT+1 then
            await Handler1(&client.stream);
        else
            _ceu_assert(0, "bug found");
        end
    end
    _fprintf(_stderr, "[client]: %s\n", e!.message);
end

code/await Server (var _char&& ip, var int port) -> none
    throws Exception.Uv
do
    var& UV_TCP_Open_Bind_Listen server = spawn UV_TCP_Open_Bind_Listen(ip,port,_,_);
    pool[10] Client cs;
    every server.ok do
        spawn Client(&server.stream) in cs;
    end
end

spawn Server("0.0.0.0", DEFAULT_PORT+0);
spawn Server("0.0.0.0", DEFAULT_PORT+1);

_printf("I will terminate after 10s...\n");
await 10s;
_printf("DONE!\n");
escape 0;
