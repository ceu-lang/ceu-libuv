#if 0
#@ Description: Sequential "echo" client.
#@  - see `tcp-01.ceu`
#@ Usage:
#@  - create an echo server in the command line:
#@  $ mkfifo /tmp/fifo
#@  $ cat /tmp/fifo  | nc -l 7000 -v | cat  > /tmp/fifo
#@ http://unix.stackexchange.com/questions/147977/netcat-echo-server-possible-with-pipes-instead-of-commands-as-strings
#@ Features:
#@  - UV_STREAM_CONNECT
#endif

#include "uv/tcp.ceu"

#define DEFAULT_PORT 7000
#define BUFFER_MAX   10

var& UV_TCP_Open client = spawn UV_TCP_Open(_);
var&? _uv_connect_t connect = &_malloc(sizeof(_uv_connect_t))
    finalize (connect) with
        // free on uv callback
    end

var _sockaddr_in dest = _;
_uv_ip4_addr("127.0.0.1", DEFAULT_PORT, &&dest);
_ceu_uv_tcp_connect(&&connect!, &&client.stream.handle as _uv_tcp_t&&, (&&dest as _sockaddr&&));

var _uv_connect_t&& c;
var int status;
(c,status) = await UV_STREAM_CONNECT until c==&&connect!;
_ceu_dbg_assert(status == 0);

var int i;
loop i in [0 -> 10[ do
    await 1s;
    client.stream.buffer = [] .. "Alo mundo!\n";
    await UV_Stream_Write_N(&client.stream,_);
    await UV_Stream_Read_N(&client.stream,_);
    client.stream.buffer = client.stream.buffer..[{'\0'}];
    _printf("%s", &&client.stream.buffer[0]);
end

_printf("DONE!\n");
escape 0;
