{
    "docs": [
        {
            "location": "/", 
            "text": "C\u00e9u-libuv v0.20 - Reference Manual\n\n\nC\u00e9u-libuv supports the development of libuv applications in the programming\nlanguage C\u00e9u:\n\n\nhttps://github.com/fsantanna/ceu-libuv\n\n\n\n\nIntroduction\n\n\nMode of Operation\n\n\nInput Events\n\n\nData Abstractions\n\n\nCode/Await Abstractions\n\n\nLicense", 
            "title": "Home"
        }, 
        {
            "location": "/#ceu-libuv-v020-reference-manual", 
            "text": "C\u00e9u-libuv supports the development of libuv applications in the programming\nlanguage C\u00e9u:  https://github.com/fsantanna/ceu-libuv   Introduction  Mode of Operation  Input Events  Data Abstractions  Code/Await Abstractions  License", 
            "title": "C\u00e9u-libuv v0.20 - Reference Manual"
        }, 
        {
            "location": "/010-introduction/", 
            "text": "Introduction\n\n\nTODO", 
            "title": "Introduction"
        }, 
        {
            "location": "/010-introduction/#introduction", 
            "text": "TODO", 
            "title": "Introduction"
        }, 
        {
            "location": "/020-modes/", 
            "text": "Mode of Operation\n\n\nTODO", 
            "title": "Mode of Operation"
        }, 
        {
            "location": "/020-modes/#mode-of-operation", 
            "text": "TODO", 
            "title": "Mode of Operation"
        }, 
        {
            "location": "/030-inputs/", 
            "text": "Input Events\n\n\nUV_FS\n\n\ninput _uv_fs_t\n UV_FS;\n\n\n\n\n\n\nOccurrence:\n\n\nWhenever a filesystem operation completes.\n\n\n\n\n\n\nPayload:\n\n\n_uv_fs_t\n: pointer to the operation request\n\n\n\n\n\n\n\n\nlibuv Reference: \nhttp://docs.libuv.org/en/v1.x/fs.html\n\n\nUV_STREAM_LISTEN\n\n\ninput (_uv_stream_t\n, int) UV_STREAM_LISTEN;\n\n\n\n\n\n\nOccurrence:\n\n\nWhenever a stream server receives an incoming connection.\n\n\n\n\n\n\nPayload:\n\n\n_uv_stream_t\n: pointer to the stream server\n\n\n\n\n\n\n\n\nlibuv Reference: \nhttp://docs.libuv.org/en/v1.x/stream.html#c.uv_connection_cb\n\n\nUV_STREAM_CONNECT\n\n\ninput (_uv_connect_t\n, int) UV_STREAM_CONNECT;\n\n\n\n\n\n\nOccurrence:\n\n\nWhenever a connection opens.\n\n\n\n\n\n\nPayload:\n\n\n_uv_connect_t\n: pointer to the connection\n\n\nint\n: opening status\n\n\n0\n: success\n\n\n0\n: error\n\n\n\n\n\n\n\n\n\n\n\n\nlibuv Reference: \nhttp://docs.libuv.org/en/v1.x/stream.html#c.uv_connect_cb\n\n\nUV_STREAM_READ\n\n\ninput (_uv_stream_t\n, ssize) UV_STREAM_READ;\n\n\n\n\n\n\nOccurrence:\n\n\nWhenever data is available on a stream.\n\n\n\n\n\n\nPayload:\n\n\n_uv_stream_t\n: pointer to the stream\n\n\nssize\n: number of bytes available\n\n\n0\n: data available\n\n\n0\n: error\n\n\n\n\n\n\n\n\n\n\n\n\nlibuv Reference: \nhttp://docs.libuv.org/en/v1.x/stream.html#c.uv_read_cb\n\n\nUV_STREAM_WRITE\n\n\ninput (_uv_write_t\n, int) UV_STREAM_WRITE;\n\n\n\n\n\n\nOccurrence:\n\n\nWhenever writing to a stream completes.\n\n\n\n\n\n\nPayload:\n\n\n_uv_write_T\n: pointer to the write request\n\n\nint\n: completion status\n\n\n0\n: success\n\n\n0\n: error\n\n\n\n\n\n\n\n\n\n\n\n\nlibuv Reference: \nhttp://docs.libuv.org/en/v1.x/stream.html#c.uv_write_cb\n\n\nUV_STREAM_ERROR\n\n\ninput (_uv_stream_t\n, int) UV_STREAM_ERROR;\n\n\n\n\n\n\nOccurrence:\n\n\nWhenever a read or write error occurs in a stream.\n\n\n\n\n\n\nPayload:\n\n\n_uv_stream_t\n: pointer to the stream\n\n\nint\n: error code\n\n\n\n\n\n\n\n\nUV_STREAM_ERROR\n always occurs before the corresponding \nUV_STREAM_READ\n or\n\nUV_STREAM_WRITE\n.\n\n\nlibuv Reference: \nhttp://docs.libuv.org/en/v1.x/errors.html", 
            "title": "Input Events"
        }, 
        {
            "location": "/030-inputs/#input-events", 
            "text": "", 
            "title": "Input Events"
        }, 
        {
            "location": "/030-inputs/#uv_fs", 
            "text": "input _uv_fs_t  UV_FS;   Occurrence:  Whenever a filesystem operation completes.    Payload:  _uv_fs_t : pointer to the operation request     libuv Reference:  http://docs.libuv.org/en/v1.x/fs.html", 
            "title": "UV_FS"
        }, 
        {
            "location": "/030-inputs/#uv_stream_listen", 
            "text": "input (_uv_stream_t , int) UV_STREAM_LISTEN;   Occurrence:  Whenever a stream server receives an incoming connection.    Payload:  _uv_stream_t : pointer to the stream server     libuv Reference:  http://docs.libuv.org/en/v1.x/stream.html#c.uv_connection_cb", 
            "title": "UV_STREAM_LISTEN"
        }, 
        {
            "location": "/030-inputs/#uv_stream_connect", 
            "text": "input (_uv_connect_t , int) UV_STREAM_CONNECT;   Occurrence:  Whenever a connection opens.    Payload:  _uv_connect_t : pointer to the connection  int : opening status  0 : success  0 : error       libuv Reference:  http://docs.libuv.org/en/v1.x/stream.html#c.uv_connect_cb", 
            "title": "UV_STREAM_CONNECT"
        }, 
        {
            "location": "/030-inputs/#uv_stream_read", 
            "text": "input (_uv_stream_t , ssize) UV_STREAM_READ;   Occurrence:  Whenever data is available on a stream.    Payload:  _uv_stream_t : pointer to the stream  ssize : number of bytes available  0 : data available  0 : error       libuv Reference:  http://docs.libuv.org/en/v1.x/stream.html#c.uv_read_cb", 
            "title": "UV_STREAM_READ"
        }, 
        {
            "location": "/030-inputs/#uv_stream_write", 
            "text": "input (_uv_write_t , int) UV_STREAM_WRITE;   Occurrence:  Whenever writing to a stream completes.    Payload:  _uv_write_T : pointer to the write request  int : completion status  0 : success  0 : error       libuv Reference:  http://docs.libuv.org/en/v1.x/stream.html#c.uv_write_cb", 
            "title": "UV_STREAM_WRITE"
        }, 
        {
            "location": "/030-inputs/#uv_stream_error", 
            "text": "input (_uv_stream_t , int) UV_STREAM_ERROR;   Occurrence:  Whenever a read or write error occurs in a stream.    Payload:  _uv_stream_t : pointer to the stream  int : error code     UV_STREAM_ERROR  always occurs before the corresponding  UV_STREAM_READ  or UV_STREAM_WRITE .  libuv Reference:  http://docs.libuv.org/en/v1.x/errors.html", 
            "title": "UV_STREAM_ERROR"
        }, 
        {
            "location": "/040-datas/", 
            "text": "Data Abstractions\n\n\nUV_FS_File\n\n\ndata UV_FS_File with\n    event void ok;\n    var   int  fd;\nend", 
            "title": "Data Abstractions"
        }, 
        {
            "location": "/040-datas/#data-abstractions", 
            "text": "", 
            "title": "Data Abstractions"
        }, 
        {
            "location": "/040-datas/#uv_fs_file", 
            "text": "data UV_FS_File with\n    event void ok;\n    var   int  fd;\nend", 
            "title": "UV_FS_File"
        }, 
        {
            "location": "/060-code-awaits/", 
            "text": "Code/Await Abstractions\n\n\nUV_FS_Open\n\n\nOpens a file.\n\n\ncode/await UV_FS_Open (var _char\n path, var int flags, var int mode)\n                        -\n (var\n UV_FS_File file)\n                            -\n int\n\n\n\n\n\n\nParameters\n\n\npath\n:  path to the file\n\n\nflags\n: access mode flags\n\n\nmode\n:  file permission mode\n\n\n\n\n\n\nInitialization\n\n\nfile\n: alias to managed \nfile\n\n\n\n\n\n\nReturn\n\n\nint\n (\n0\n): opening error\n\n\n\n\n\n\n\n\nThe file is only ready for use after \nUV_FS_Open\n triggers \nfile.ok\n.\n\n\nAll allocated resources are released on termination.\n\n\nExample:\n\n\n#include \nuv/fs.ceu\n\n\nvar\n UV_FS_File file;\n\nvar int? err =\n    watching UV_FS_Open(\nfile.txt\n, _O_RDONLY, 0) -\n (\nfile) do\n        await file.ok;\n        // file is ready for use\n        _printf(\nopening ok\\n\n);\n    end;\nif err? then\n    _printf(\nopening error: %d\\n\n, err!);\nend\n\nescape 0;\n\n\n\n\nOpens \nfile.txt\n and prints \nopening ok\n after the file is ready for use.\nIn case of failure, prints \nopening error\n along with the error code.\n\n\nlibuv References:\n    \nuv_fs_open\n,\n    \nceu_uv_fs_close\n,\n    \nuv_fs_req_cleanup\n.", 
            "title": "Code/Await Abstractions"
        }, 
        {
            "location": "/060-code-awaits/#codeawait-abstractions", 
            "text": "", 
            "title": "Code/Await Abstractions"
        }, 
        {
            "location": "/060-code-awaits/#uv_fs_open", 
            "text": "Opens a file.  code/await UV_FS_Open (var _char  path, var int flags, var int mode)\n                        -  (var  UV_FS_File file)\n                            -  int   Parameters  path :  path to the file  flags : access mode flags  mode :  file permission mode    Initialization  file : alias to managed  file    Return  int  ( 0 ): opening error     The file is only ready for use after  UV_FS_Open  triggers  file.ok .  All allocated resources are released on termination.  Example:  #include  uv/fs.ceu \n\nvar  UV_FS_File file;\n\nvar int? err =\n    watching UV_FS_Open( file.txt , _O_RDONLY, 0) -  ( file) do\n        await file.ok;\n        // file is ready for use\n        _printf( opening ok\\n );\n    end;\nif err? then\n    _printf( opening error: %d\\n , err!);\nend\n\nescape 0;  Opens  file.txt  and prints  opening ok  after the file is ready for use.\nIn case of failure, prints  opening error  along with the error code.  libuv References:\n     uv_fs_open ,\n     ceu_uv_fs_close ,\n     uv_fs_req_cleanup .", 
            "title": "UV_FS_Open"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\nC\u00e9u-Arduino is distributed under the MIT license reproduced below:\n\n\n Copyright (C) 2012-2016 Francisco Sant'Anna\n\n Permission is hereby granted, free of charge, to any person obtaining a copy of\n this software and associated documentation files (the \nSoftware\n), to deal in\n the Software without restriction, including without limitation the rights to\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n of the Software, and to permit persons to whom the Software is furnished to do\n so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "C\u00e9u-Arduino is distributed under the MIT license reproduced below:   Copyright (C) 2012-2016 Francisco Sant'Anna\n\n Permission is hereby granted, free of charge, to any person obtaining a copy of\n this software and associated documentation files (the  Software ), to deal in\n the Software without restriction, including without limitation the rights to\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n of the Software, and to permit persons to whom the Software is furnished to do\n so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.", 
            "title": "License"
        }
    ]
}